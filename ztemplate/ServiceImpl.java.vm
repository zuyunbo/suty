package com.cloud.apiservice.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import com.cloud.apimodel.param.${className}Param;
import ${package}.${moduleName}.${className};
import com.cloud.apiservice.mapper.${className}Mapper;
import com.cloud.apiservice.service.${className}Service;
import com.example.commoncenter.exception.IllegalParameterException;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import java.util.List;
import org.springframework.stereotype.Service;



import java.util.Map;

/**
 * ${comments}
 *
 * @author ${author} ${email}
 * @since ${version} ${date}
 */
@Service
public class ${className}ServiceImpl implements ${className}Service {


    @Autowired
    ${className}Mapper ${classNames}Mapper;

    @Override
    public int save(${className} entity) {
        return ${classNames}Mapper.insert(entity);
    }

    @Override
    public int update(${className} entity) {
        if (entity.getId() == null || entity.getId() == 0L) {
            // 自己定义的异常方法
            throw new IllegalParameterException("更新内容id不能为空");
        }

        return ${classNames}Mapper.updateByPrimaryKeySelective(entity);
    }

    @Override
    public int remove(Long id) {
        if (id == null || id == 0L) {
            // 自己定义的异常方法
            throw new IllegalParameterException("删除操作id不能为空");
        }
        return ${classNames}Mapper.deleteByPrimaryKey(id);
    }

    @Override
    public ${className} getById(Long id) {
        if (id == null || id == 0L) {
            // 自己定义的异常方法
            throw new IllegalParameterException("详情id不能为空");
        }

        return ${classNames}Mapper.selectByPrimaryKey(id);
    }

    @Override
    public PageInfo<${className}> pageQuery(${className}Param queryParam) {
        return PageHelper.startPage(queryParam.getPn(), queryParam.getPs())
                .doSelectPageInfo(() -> ${classNames}Mapper.listQuery(queryParam));
    }

    @Override
    public List<${className}> listQuery(${className}Param queryParam) {
        return ${classNames}Mapper.selectAll();
    }
}